basePath: /api/v1
definitions:
  auth_handler.LoginRequest:
    properties:
      login:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - login
    - password
    type: object
  auth_handler.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  auth_handler.LogoutRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  auth_handler.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  auth_handler.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  auth_handler.RegisterRequest:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  auth_handler.RegisterResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  auth_handler.UpdatePasswordRequest:
    properties:
      new_password:
        minLength: 6
        type: string
      old_password:
        minLength: 6
        type: string
    required:
    - new_password
    - old_password
    type: object
  auth_handler.UpdatePasswordResponse:
    properties:
      message:
        type: string
    type: object
  models.NotificationSwagger:
    properties:
      created_at:
        type: string
      id:
        type: integer
      is_read:
        type: boolean
      payload: {}
      type:
        type: string
      user_id:
        type: integer
    type: object
  notification_handler.GetUnreadCountResponse:
    properties:
      count:
        type: integer
    type: object
  notification_handler.GetUserNotificationFeedSwaggerResponse:
    properties:
      limit:
        type: integer
      notifications:
        items:
          $ref: '#/definitions/models.NotificationSwagger'
        type: array
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  notification_handler.ReadAllUserNotificationsResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  notification_handler.ReadNotificationResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  notification_handler.RemoveNotificationResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  notification_handler.SendNotificationRequest:
    type: object
  notification_handler.SendNotificationResponse:
    properties:
      message:
        type: string
      notification_id:
        type: integer
    type: object
  post_handler.CreatePostRequest:
    properties:
      content:
        type: string
      media_items:
        items:
          $ref: '#/definitions/post_handler.MediaItemInput'
        maxItems: 9
        type: array
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - title
    type: object
  post_handler.CreatePostResponse:
    properties:
      author_avatar_url:
        type: string
      author_bio:
        type: string
      author_email:
        type: string
      author_full_name:
        type: string
      author_id:
        type: integer
      author_username:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      media:
        items:
          $ref: '#/definitions/post_handler.PostMediaResponse'
        type: array
      tags:
        items:
          $ref: '#/definitions/post_handler.TagResponse'
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  post_handler.GetPostMedia:
    properties:
      id:
        type: integer
      position:
        type: integer
      type:
        type: string
      url:
        type: string
    type: object
  post_handler.GetPostResponse:
    properties:
      author:
        $ref: '#/definitions/post_handler.GetPostUser'
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      media:
        items:
          $ref: '#/definitions/post_handler.GetPostMedia'
        type: array
      tags:
        items:
          $ref: '#/definitions/post_handler.GetPostTag'
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  post_handler.GetPostTag:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  post_handler.GetPostUser:
    properties:
      avatar_url:
        type: string
      full_name:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  post_handler.ListPostAuthor:
    properties:
      avatar_url:
        type: string
      full_name:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  post_handler.ListPostItem:
    properties:
      author:
        $ref: '#/definitions/post_handler.ListPostAuthor'
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      media:
        items:
          $ref: '#/definitions/post_handler.PostMediaResponse'
        type: array
      tags:
        items:
          $ref: '#/definitions/post_handler.TagResponse'
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  post_handler.ListPostsResponse:
    properties:
      posts:
        items:
          $ref: '#/definitions/post_handler.ListPostItem'
        type: array
      total:
        type: integer
    type: object
  post_handler.MediaItemInput:
    properties:
      position:
        maximum: 9
        minimum: 1
        type: integer
      type:
        enum:
        - image
        - video
        type: string
      url:
        maxLength: 512
        type: string
    required:
    - type
    - url
    type: object
  post_handler.PostMediaResponse:
    properties:
      id:
        type: integer
      position:
        type: integer
      type:
        type: string
      url:
        type: string
    type: object
  post_handler.TagResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  post_handler.UpdatePostAuthor:
    properties:
      avatar_url:
        type: string
      full_name:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  post_handler.UpdatePostRequest:
    properties:
      content:
        type: string
      media_items:
        items:
          $ref: '#/definitions/post_handler.MediaItemInput'
        maxItems: 9
        type: array
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  post_handler.UpdatePostResponse:
    properties:
      author:
        $ref: '#/definitions/post_handler.UpdatePostAuthor'
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      media:
        items:
          $ref: '#/definitions/post_handler.PostMediaResponse'
        type: array
      tags:
        items:
          $ref: '#/definitions/post_handler.TagResponse'
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  relation_handler.FollowRequest:
    properties:
      followee_id:
        type: integer
    required:
    - followee_id
    type: object
  relation_handler.FollowResponse:
    properties:
      message:
        type: string
    type: object
  relation_handler.GetFolloweesResponse:
    properties:
      followee_ids:
        items:
          type: integer
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  relation_handler.GetFollowersResponse:
    properties:
      follower_ids:
        items:
          type: integer
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  relation_handler.UnfollowRequest:
    properties:
      followee_id:
        type: integer
    required:
    - followee_id
    type: object
  relation_handler.UnfollowResponse:
    properties:
      message:
        type: string
    type: object
  user_handler.CreateUserRequest:
    properties:
      avatar_url:
        type: string
      bio:
        maxLength: 500
        type: string
      email:
        type: string
      full_name:
        maxLength: 100
        type: string
      password:
        minLength: 6
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  user_handler.CreateUserResponse:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  user_handler.GetUserByEmailResponse:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  user_handler.GetUserByUsernameResponse:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  user_handler.GetUserResponse:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  user_handler.SearchUsersResponse:
    properties:
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/user_handler.UserResponse'
        type: array
    type: object
  user_handler.UpdateAvatarRequest:
    properties:
      avatar_url:
        type: string
    required:
    - avatar_url
    type: object
  user_handler.UpdateUserRequest:
    properties:
      bio:
        maxLength: 500
        type: string
      email:
        type: string
      full_name:
        maxLength: 100
        type: string
      id:
        minimum: 1
        type: integer
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - id
    type: object
  user_handler.UpdateUserResponse:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  user_handler.UserResponse:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Gateway for Pinstack social media platform
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Pinstack API Gateway
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with login credentials
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth_handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            $ref: '#/definitions/auth_handler.LoginResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate refresh token
      parameters:
      - description: Logout data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth_handler.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful logout
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid refresh token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User logout
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth_handler.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful token refresh
          schema:
            $ref: '#/definitions/auth_handler.RefreshTokenResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid refresh token
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth_handler.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successful registration
          schema:
            $ref: '#/definitions/auth_handler.RegisterResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: User already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User registration
      tags:
      - auth
  /auth/update-password:
    post:
      consumes:
      - application/json
      description: Update user password with old and new password
      parameters:
      - description: Password update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth_handler.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            $ref: '#/definitions/auth_handler.UpdatePasswordResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user password
      tags:
      - auth
  /notification/{notification_id}:
    delete:
      consumes:
      - application/json
      description: Remove a notification by ID
      parameters:
      - description: Notification ID
        in: path
        name: notification_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Notification removed successfully
          schema:
            $ref: '#/definitions/notification_handler.RemoveNotificationResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Notification not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Remove notification
      tags:
      - notification
    get:
      consumes:
      - application/json
      description: Get notification details by ID
      parameters:
      - description: Notification ID
        in: path
        name: notification_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Notification details
          schema:
            $ref: '#/definitions/models.NotificationSwagger'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Notification not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get notification details
      tags:
      - notification
  /notification/{notification_id}/read:
    put:
      consumes:
      - application/json
      description: Mark a notification as read
      parameters:
      - description: Notification ID
        in: path
        name: notification_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Notification marked as read
          schema:
            $ref: '#/definitions/notification_handler.ReadNotificationResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Notification not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Mark notification as read
      tags:
      - notification
  /notification/feed:
    get:
      consumes:
      - application/json
      description: Get paginated list of notifications for a user
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User notification feed
          schema:
            $ref: '#/definitions/notification_handler.GetUserNotificationFeedSwaggerResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user notification feed
      tags:
      - notification
  /notification/read-all:
    put:
      consumes:
      - application/json
      description: Mark all notifications of a user as read
      produces:
      - application/json
      responses:
        "200":
          description: All notifications marked as read
          schema:
            $ref: '#/definitions/notification_handler.ReadAllUserNotificationsResponse'
        "404":
          description: Notification not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Mark all user notifications as read
      tags:
      - notification
  /notification/send:
    post:
      consumes:
      - application/json
      description: Send notification to a user
      parameters:
      - description: Send notification request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/notification_handler.SendNotificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Notification sent successfully
          schema:
            $ref: '#/definitions/notification_handler.SendNotificationResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Notification limit exceeded
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Send notification
      tags:
      - notification
  /notification/unread-count:
    get:
      consumes:
      - application/json
      description: Get the count of unread notifications for a user
      produces:
      - application/json
      responses:
        "200":
          description: Unread notification count
          schema:
            $ref: '#/definitions/notification_handler.GetUnreadCountResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get unread notification count
      tags:
      - notification
  /posts:
    post:
      consumes:
      - application/json
      description: Create a new post with title, content, tags and media
      parameters:
      - description: Post creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/post_handler.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Post created successfully
          schema:
            $ref: '#/definitions/post_handler.CreatePostResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    delete:
      description: Delete an existing post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a post
      tags:
      - posts
    get:
      description: Get detailed information about a specific post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post information
          schema:
            $ref: '#/definitions/post_handler.GetPostResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get post by ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update an existing post with new data
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Post update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/post_handler.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Post updated successfully
          schema:
            $ref: '#/definitions/post_handler.UpdatePostResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a post
      tags:
      - posts
  /posts/list:
    get:
      consumes:
      - application/json
      description: Get a list of posts with optional filtering by author and date
        range
      parameters:
      - description: Filter by author ID
        in: query
        name: author_id
        type: integer
      - description: Filter posts created after this time (RFC3339 format)
        in: query
        name: created_after
        type: string
      - description: Filter posts created before this time (RFC3339 format)
        in: query
        name: created_before
        type: string
      - description: Pagination offset
        in: query
        name: offset
        type: integer
      - description: Pagination limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of posts
          schema:
            $ref: '#/definitions/post_handler.ListPostsResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List posts with filters
      tags:
      - posts
  /relation/{user_id}/followees:
    get:
      consumes:
      - application/json
      description: Get list of users that the user is following
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - default: 20
        description: Limit for pagination
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Followees retrieved successfully
          schema:
            $ref: '#/definitions/relation_handler.GetFolloweesResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user followees
      tags:
      - relation
  /relation/{user_id}/followers:
    get:
      consumes:
      - application/json
      description: Get list of user followers by user ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - default: 20
        description: Limit for pagination
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Followers retrieved successfully
          schema:
            $ref: '#/definitions/relation_handler.GetFollowersResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user followers
      tags:
      - relation
  /relation/follow:
    post:
      consumes:
      - application/json
      description: Follow another user
      parameters:
      - description: Follow request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/relation_handler.FollowRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Followed successfully
          schema:
            $ref: '#/definitions/relation_handler.FollowResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Already following
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Follow user
      tags:
      - relation
  /relation/unfollow:
    post:
      consumes:
      - application/json
      description: Unfollow another user
      parameters:
      - description: Unfollow request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/relation_handler.UnfollowRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Unfollowed successfully
          schema:
            $ref: '#/definitions/relation_handler.UnfollowResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found or relation not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Unfollow user
      tags:
      - relation
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user with provided data
      parameters:
      - description: User creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user_handler.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/user_handler.CreateUserResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: User already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user fields by ID
      parameters:
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user_handler.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/user_handler.UpdateUserResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Operation not allowed
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Username or email already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user information
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: User deleted successfully
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Operation not allowed
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user by ID
      tags:
      - users
    get:
      description: Get user information by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/user_handler.GetUserResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user by ID
      tags:
      - users
  /users/avatar:
    put:
      consumes:
      - application/json
      description: Update the avatar URL for a user
      parameters:
      - description: Avatar update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user_handler.UpdateAvatarRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Avatar updated successfully
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Operation not allowed
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user avatar
      tags:
      - users
  /users/email/{email}:
    get:
      description: Get user information by email
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/user_handler.GetUserByEmailResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user by email
      tags:
      - users
  /users/search:
    get:
      description: Search users by query string
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Results per page (max 100)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Search results
          schema:
            $ref: '#/definitions/user_handler.SearchUsersResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Search users
      tags:
      - users
  /users/username/{username}:
    get:
      description: Get user information by username
      parameters:
      - description: User username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/user_handler.GetUserByUsernameResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user by username
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
