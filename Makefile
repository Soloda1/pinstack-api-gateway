.PHONY: test test-unit test-integration test-gateway-integration clean build run docker-build setup-system-tests

BINARY_NAME=api-gateway
DOCKER_IMAGE=pinstack-api-gateway:latest
GO_VERSION=1.24.2
SYSTEM_TESTS_DIR=../pinstack-system-tests
SYSTEM_TESTS_REPO=https://github.com/Soloda1/pinstack-system-tests.git

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Go
check-go-version:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Go..."
	@go version | grep -q "go$(GO_VERSION)" || (echo "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Go $(GO_VERSION)" && exit 1)
	@echo "‚úÖ Go $(GO_VERSION) –Ω–∞–π–¥–µ–Ω"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ system tests —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
setup-system-tests:
	@echo "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ system tests —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
	@if [ ! -d "$(SYSTEM_TESTS_DIR)" ]; then \
		echo "üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ pinstack-system-tests..."; \
		git clone $(SYSTEM_TESTS_REPO) $(SYSTEM_TESTS_DIR); \
	else \
		echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pinstack-system-tests..."; \
		cd $(SYSTEM_TESTS_DIR) && git pull origin main; \
	fi
	@echo "‚úÖ System tests –≥–æ—Ç–æ–≤—ã"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
fmt: check-go-version
	gofmt -s -w .
	go fmt ./...

lint: check-go-version
	go vet ./...
	golangci-lint run

# –Æ–Ω–∏—Ç —Ç–µ—Å—Ç—ã
test-unit: check-go-version
	go test -v -count=1 -race -coverprofile=coverage.txt ./...

# –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ docker-compose
start-gateway-infrastructure: setup-system-tests
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ API Gateway..."
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml up -d
	@echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@sleep 90

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
check-services:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@docker exec pinstack-user-db-test pg_isready -U postgres || (echo "‚ùå User –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞" && exit 1)
	@docker exec pinstack-auth-db-test pg_isready -U postgres || (echo "‚ùå Auth –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞" && exit 1)
	@docker exec pinstack-post-db-test pg_isready -U postgres || (echo "‚ùå Post –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞" && exit 1)
	@docker exec pinstack-notification-db-test pg_isready -U postgres || (echo "‚ùå Notification –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞" && exit 1)
	@docker exec pinstack-relation-db-test pg_isready -U postgres || (echo "‚ùå Relation –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞" && exit 1)
	@echo "‚úÖ –í—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤—ã"
	@echo "=== User Service logs ==="
	@docker logs pinstack-user-service-test --tail=10
	@echo "=== Auth Service logs ==="
	@docker logs pinstack-auth-service-test --tail=10
	@echo "=== Post Service logs ==="
	@docker logs pinstack-post-service-test --tail=10
	@echo "=== Notification Service logs ==="
	@docker logs pinstack-notification-service-test --tail=10
	@echo "=== Relation Service logs ==="
	@docker logs pinstack-relation-service-test --tail=10
	@echo "=== API Gateway logs ==="
	@docker logs pinstack-api-gateway-test --tail=10

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö endpoints API Gateway
test-gateway-integration: start-gateway-infrastructure check-services
	@echo "üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è API Gateway..."
	cd $(SYSTEM_TESTS_DIR) && \
	go test -v -count=1 -timeout=15m ./internal/scenarios/integration/...

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop-gateway-infrastructure:
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml stop
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml rm -f

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤–∫–ª—é—á–∞—è volumes)
clean-gateway-infrastructure:
	@echo "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml down -v
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, –æ–±—Ä–∞–∑–æ–≤ –∏ volumes..."
	docker container prune -f
	docker image prune -a -f
	docker volume prune -f
	docker network prune -f
	@echo "‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –ü–æ–ª–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (—Å –æ—á–∏—Å—Ç–∫–æ–π)
test-integration: test-gateway-integration stop-gateway-infrastructure

# –í—Å–µ —Ç–µ—Å—Ç—ã
test-all: fmt lint test-unit test-integration

# –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
logs-user:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f user-service-test

logs-auth:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f auth-service-test

logs-post:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f post-service-test

logs-notification:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f notification-service-test

logs-relation:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f relation-service-test

logs-gateway:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f api-gateway-test

logs-user-db:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f user-db-test

logs-auth-db:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f auth-db-test

logs-post-db:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f post-db-test

logs-notification-db:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f notification-db-test

logs-relation-db:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f relation-db-test

# –û—á–∏—Å—Ç–∫–∞
clean: clean-gateway-infrastructure
	go clean
	rm -f $(BINARY_NAME)
	@echo "üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker —Å–∏—Å—Ç–µ–º—ã..."
	docker system prune -a -f --volumes
	@echo "‚úÖ –í—Å—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)
clean-docker-force:
	@echo "üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê DOCKER..."
	@echo "‚ö†Ô∏è  –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –æ–±—Ä–∞–∑—ã, volumes –∏ —Å–µ—Ç–∏!"
	@read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	docker stop $$(docker ps -aq) 2>/dev/null || true
	docker rm $$(docker ps -aq) 2>/dev/null || true
	docker rmi $$(docker images -q) 2>/dev/null || true
	docker volume rm $$(docker volume ls -q) 2>/dev/null || true
	docker network rm $$(docker network ls -q) 2>/dev/null || true
	docker system prune -a -f --volumes
	@echo "üí• –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# CI –ª–æ–∫–∞–ª—å–Ω–æ (–∏–º–∏—Ç–∞—Ü–∏—è GitHub Actions)
ci-local: test-all
	@echo "üéâ –õ–æ–∫–∞–ª—å–Ω—ã–π CI –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"

# –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (—Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫ –±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏)
quick-test: start-gateway-infrastructure
	@echo "‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏..."
	cd $(SYSTEM_TESTS_DIR) && \
	go test -v -count=1 -timeout=10m ./internal/scenarios/integration/...
	$(MAKE) stop-gateway-infrastructure